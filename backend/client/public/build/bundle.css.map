{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../DiceInput.svelte",
    "../../Player.svelte",
    "../../Table.svelte"
  ],
  "sourcesContent": [
    "<style>\n\t#ThreeJS {\n    position: absolute;\n    left: 0px;\n    top: 0px;\n\t}\n  #foreground {\n    z-index: 1000;\n    position: absolute;\n    left: 0px;\n    top: 0px;\n  }\n  .test {\n  color: white;\n}\n</style>\n\n<script>\n\timport { onMount } from 'svelte';\n  import io from 'socket.io-client';\n  import Table from './Table.svelte';\n  import Player from './Player.svelte';\n  import DiceInput from './DiceInput.svelte';\n  import Roll, { initRollDice, rollDice, changeTexture } from './Roll.svelte';\n\n  const apiURL = undefined || \"https://guarded-stream-90676.herokuapp.com\";\n\n  let username = localStorage.getItem(\"username\");\n  if (!username) {\n    username = prompt(\"Please enter your user name\", \"\");\n    localStorage.setItem(\"username\", username);\n  }\n\n  const socket = io(apiURL + \"/?username=\" + username);\n  let userDict = {};\n  let userList = [];\n  let rolls = [];\n  let mylatestroll = 0;\n  let diceinput;\n  let modinput;\n  $: diceandmodinput = {dice: diceinput, mod: modinput};\n  let floorcolor = \"#00aa00\";\n  let texturepath;\n\n  onMount(()=> {\n    initRollDice();\n  });\n\n  function roll() {\n  \tsocket.emit(\"roll\", diceandmodinput);\n  }\n\n  function handleTextureUpdated(event) {\n    changeTexture(event.detail.path);\n  }\n\n  // listen for roll event\n  socket.on(\"roll\", (userId, diceInput) => {\n    rollDice(diceInput);\n\t  if (userDict[userId]==username){\n\t\t  mylatestroll = diceInput.result;\n\t  }\n    rolls = [{\n      user: userDict[userId],\n      result: diceInput.result\n    }, ...rolls];\n  });\n\n  // listen for user list event\n  socket.on(\"users-list\", (data) => {\n    userDict = data;\n    userList = Object.values(data);\n  });\n\n</script>\n\n<Roll/>\n\n<div id=\"foreground\">\n  <Player playername={username} latestroll={mylatestroll}/>\n\n  <h2>Rollers</h2>\n  <ul>\n    {#each userList as user, i}\n      <li>\n        {user}\n      </li>\n    {/each}\n  </ul>\n\n  <button on:click={roll}>Roll dice</button>\n\n  <h2>Rolls</h2>\n  <ul>\n    {#each rolls as {user, result}, i}\n      <li>\n        {user}: {result}\n      </li>\n    {/each}\n  </ul>\n\n  <Table on:textureSelected={handleTextureUpdated}/>\n  <DiceInput bind:dice={diceinput} bind:modifier={modinput}/>\n  <h3 class=\"test\">Objeto diceandmodinput en App para poder pasar a roll en alg√∫n momento</h3>\n  <p class=\"test\">{JSON.stringify(diceandmodinput, null, 2)}</p>\n\n</div>\n",
    "<script>\n  import { modValidator } from './validators.js';\n\n  import { writable } from \"svelte/store\";\n\n  export let dice = [\n    { id: 0, label: \"D4\", range: 4, qty: parseInt(localStorage.getItem(\"D4\")) || 0, result: 0 },\n    { id: 1, label: \"D6\", range: 6, qty: parseInt(localStorage.getItem(\"D6\")) || 0, result: 0 },\n    { id: 2, label: \"D8\", range: 8, qty: parseInt(localStorage.getItem(\"D8\")) || 0, result: 0 },\n    { id: 3, label: \"D10\", range: 10, qty: parseInt(localStorage.getItem(\"D10\")) || 0, result: 0 },\n    { id: 4, label: \"D12\", range: 12, qty: parseInt(localStorage.getItem(\"D12\")) || 0, result: 0 },\n    { id: 5, label: \"D20\", range: 20, qty: parseInt(localStorage.getItem(\"D20\")) || 0, result: 0 },\n    { id: 6, label: \"D100\", range: 100, qty: parseInt(localStorage.getItem(\"D100\")) || 0, result: 0 },\n  ]\n  export let modifier = '';\n\n  $: {\n    dice.forEach((d) => {\n      localStorage.setItem(d.label, d.qty);\n    })\n  }\n\n  function randomInt(dieid, qty){\n    let range = dice[dieid]['range'];\n    let res = 0;\n    if (qty > 0){\n      for (let index = 0; index < qty; index++) {\n      let r = Math.random() * 100;\n      let mod = range/100;\n      let d = Math.round(r*mod);\n      res = res + d;\n      }\n    }\n    modifier = res;\n    return res;\n  }\n\n  let latestroll = 0;\n\n</script>\n\n<style>\n\n.test {\n  color: white;\n}\n</style>\n\n\n{#each dice as die}\n<label class=\"test\">\n\t{die.label} <input type=number bind:value={die.qty} min=0 max=20>\n</label>\n{/each}\n<label class=\"test\">\n\tMod <input pattern=\"[+-]*[0-9]{1,3}\" title=\"(+/-)# please\" size=5 type=text bind:value={modifier}> {modValidator(modifier)}\n\n</label>\n",
    "<script>\n\n    export let playername = 'Anonymous player';\n    export let latestroll = 0;\n\n</script>\n\n<style>\n\n.playername {\n\n    background-color: rgb(172, 100, 190);\n    border: 1em;\n    padding: 0.2em;\n}\n\n</style>\n\n<h2 class=\"playername\">Welcome {playername}!</h2>\n<p class=\"latestroll\">Your latest roll was: {latestroll}</p>",
    "<script>\n\timport { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  let tabletextures = [\n    { id: 0, name: \"Tavern #1\", path: 'table/img/table00.jpg', color:\"#761CEC\", selected:true},\n    { id: 1, name: \"Tavern #2\", path: 'table/img/table01.jpg', color:\"#FC8EAC\", selected:false},\n    { id: 2, name: \"Tavern #3\", path: 'table/img/table02.jpg', color:\"#A60570\", selected:false},\n  ];\n\n  let selected = 0;\n  let textureindex = 2;\n  let text = \"Game table selected by default\";\n\n  export let selectedImage = tabletextures[textureindex]['path'];\n  export let matchingcolor;\n\n  function setImage(i) {\n    selectedImage = tabletextures[i]['path'];\n    text = \"You chose \"+tabletextures[i]['name'];\n    matchingcolor = tabletextures[i]['color'];\n    tabletextures[selected].selected = false;\n    tabletextures[i].selected = true;\n    selected = i;\n\n\t\tdispatch('textureSelected', {\n\t\t\tpath: tabletextures[i]['path']\n\t\t});\n  }\n\n</script>\n\n<style>\nimg {\n    padding: 0.5em;\n    border: 0.1em solid aquamarine;\n\n}\n\n.selectedtexture {\n    padding: 0.5em;\n    border-radius: 10%;\n    width: 100px;\n    border: 0.1em solid red;\n\n}\n\n.texturesample {\n  padding: 0.5em;\n  border-radius: 10%;\n  width: 100px;\n}\n\n</style>\n\n<h1>Choose your game table texture</h1>\n\n{#each tabletextures as { id, path, selected }, i}\n{#if selected}\n<img on:click|preventDefault={() => setImage(i)} class=\"selectedtexture\"  src=\"{path}\" alt=\"{id}\"/>\n{:else}\n<img on:click|preventDefault={() => setImage(i)} class=\"texturesample\"  src=\"{path}\" alt=\"{id}\"/>\n{/if}\n{/each}\n\n"
  ],
  "names": [],
  "mappings": "AAME,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,AACV,CAAC,AACD,KAAK,eAAC,CAAC,AACP,KAAK,CAAE,KAAK,AACd,CAAC;AC6BD,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,KAAK,AACd,CAAC;ACpCD,WAAW,cAAC,CAAC,AAET,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,KAAK,AAClB,CAAC;ACoBD,GAAG,cAAC,CAAC,AACD,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,UAAU,AAElC,CAAC,AAED,gBAAgB,cAAC,CAAC,AACd,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,AAE3B,CAAC,AAED,cAAc,cAAC,CAAC,AACd,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,KAAK,AACd,CAAC"
}