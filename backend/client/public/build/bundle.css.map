{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Player.svelte",
    "../../Table.svelte"
  ],
  "sourcesContent": [
    "<style>\n\t#ThreeJS {\n    position: absolute;\n    left: 0px;\n    top: 0px;\n\t}\n  #foreground {\n    z-index: 1000;\n    position: absolute;\n    left: 0px;\n    top: 0px;\n  }\n</style>\n\n<script>\n  import io from 'socket.io-client';\n  import Table from './Table.svelte';\n  import Player from './Player.svelte';\n  import DiceInput from './DiceInput.svelte';\n\n\timport { onMount } from 'svelte';\n\n  const apiURL = \"http://127.0.0.1:8080\" || \"https://guarded-stream-90676.herokuapp.com\";\n  const username = prompt(\"Please enter your user name\", \"\");\n\n  const socket = io(apiURL + \"/?username=\" + username);\n  let userDict = {};\n  let userList = [];\n  let rolls = [];\n  let mylatestroll = 0;\n\n  function roll() {\n  \tsocket.emit(\"roll\");\n  }\n\n  // listen for roll event\n  socket.on(\"roll\", (userId, result) => {\n\t  console.log(\"received roll\", userId, result);\n\t  if (userDict[userId]==username){\n\t\t  mylatestroll = result;\n\t  }\n    rolls = [{\n      user: userDict[userId],\n      result: result\n    }, ...rolls];\n    console.log(rolls);\n      console.log(\"received roll\", userId, result);\n      rolls = [{\n        user: userDict[userId],\n        result: result\n      }, ...rolls];\n      console.log(rolls);\n  });\n\n  // listen for user list event\n  socket.on(\"users-list\", (data) => {\n    console.log(\"received users-list\", data);\n    userDict = data;\n    userList = Object.values(data);\n  });\n\n\nimport * as THREE from \"three\";\nimport OrbitControls from 'orbit-controls-es6';\n\nimport CANNON from \"cannon\";\nimport { DiceManager, DiceD6, DiceD20 } from \"threejs-dice/lib/dice\";\nimport Stats from \"stats.js\";\n\n// standard global variables\nvar container,\n\tscene,\n\tcamera,\n\trenderer,\n\tcontrols,\n\tstats,\n\tworld,\n\tdice = [];\n\n// FUNCTIONS\nonMount(() => {\n\t// SCENE\n\tscene = new THREE.Scene();\n\t// CAMERA\n\tvar SCREEN_WIDTH = window.innerWidth,\n\t\tSCREEN_HEIGHT = window.innerHeight;\n\tvar VIEW_ANGLE = 45,\n\t\tASPECT = SCREEN_WIDTH / SCREEN_HEIGHT,\n\t\tNEAR = 0.01,\n\t\tFAR = 20000;\n\tcamera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);\n\tscene.add(camera);\n\tcamera.position.set(0, 30, 30);\n\t// RENDERER\n\trenderer = new THREE.WebGLRenderer({ antialias: true });\n\trenderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n\trenderer.shadowMap.enabled = true;\n\trenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n\tcontainer = document.getElementById(\"ThreeJS\");\n\tcontainer.appendChild(renderer.domElement);\n\t// EVENTS\n\t// CONTROLS\n\tcontrols = new OrbitControls(camera, renderer.domElement);\n\t// STATS\n\t// stats = new Stats();\n\t// stats.domElement.style.position = \"absolute\";\n\t// stats.domElement.style.bottom = \"0px\";\n\t// stats.domElement.style.zIndex = 100;\n\t// container.appendChild(stats.domElement);\n\n\tlet ambient = new THREE.AmbientLight(\"#ffffff\", 0.3);\n\tscene.add(ambient);\n\n\tlet directionalLight = new THREE.DirectionalLight(\"#ffffff\", 0.5);\n\tdirectionalLight.position.x = -1000;\n\tdirectionalLight.position.y = 1000;\n\tdirectionalLight.position.z = 1000;\n\tscene.add(directionalLight);\n\n\tlet light = new THREE.SpotLight(0xefdfd5, 1.3);\n\tlight.position.y = 100;\n\tlight.target.position.set(0, 0, 0);\n\tlight.castShadow = true;\n\tlight.shadow.camera.near = 50;\n\tlight.shadow.camera.far = 110;\n\tlight.shadow.mapSize.width = 1024;\n\tlight.shadow.mapSize.height = 1024;\n\tscene.add(light);\n\n\t// FLOOR\n\tvar floorMaterial = new THREE.MeshPhongMaterial({\n\t\tcolor: \"#00aa00\",\n\t\tside: THREE.DoubleSide\n\t});\n\tvar floorGeometry = new THREE.PlaneGeometry(30, 30, 10, 10);\n\tvar floor = new THREE.Mesh(floorGeometry, floorMaterial);\n\tfloor.receiveShadow = true;\n\tfloor.rotation.x = Math.PI / 2;\n\tscene.add(floor);\n\t// SKYBOX/FOG\n\tvar skyBoxGeometry = new THREE.CubeGeometry(10000, 10000, 10000);\n\tvar skyBoxMaterial = new THREE.MeshPhongMaterial({\n\t\tcolor: 0x9999ff,\n\t\tside: THREE.BackSide\n\t});\n\tvar skyBox = new THREE.Mesh(skyBoxGeometry, skyBoxMaterial);\n\tscene.add(skyBox);\n\tscene.fog = new THREE.FogExp2(0x9999ff, 0.00025);\n\n\t////////////\n\t// CUSTOM //\n\t////////////\n\tworld = new CANNON.World();\n\n\tworld.gravity.set(0, -9.82 * 20, 0);\n\tworld.broadphase = new CANNON.NaiveBroadphase();\n\tworld.solver.iterations = 16;\n\n\tDiceManager.setWorld(world);\n\n\t//Floor\n\tlet floorBody = new CANNON.Body({\n\t\tmass: 0,\n\t\tshape: new CANNON.Plane(),\n\t\tmaterial: DiceManager.floorBodyMaterial\n\t});\n\tfloorBody.quaternion.setFromAxisAngle(\n\t\tnew CANNON.Vec3(1, 0, 0),\n\t\t-Math.PI / 2\n\t);\n\tworld.add(floorBody);\n\n\t//Walls\n\n\t// var colors = [\"#ff0000\", \"#ffff00\", \"#00ff00\", \"#0000ff\", \"#ff00ff\"];\n\t// for (var i = 0; i < 5; i++) {\n\t// \tvar die = new DiceD6({ size: 1.5, backColor: colors[i] });\n\t// \tscene.add(die.getObject());\n\t// \tdice.push(die);\n\t// }\n\n\tvar die = new DiceD20({ size: 3.5, backColor: \"#ff0000\" });\n\tscene.add(die.getObject());\n\tdice.push(die);\n\n\tdocument\n\t\t.querySelector(\"#ThreeJS\")\n\t\t.addEventListener(\"click\", randomDiceThrow);\n\t// setInterval(randomDiceThrow, 3000);\n\t// randomDiceThrow();\n\trequestAnimationFrame(animate);\n});\n\nfunction randomDiceThrow() {\n  var diceValues = [];\n\n  for (var i = 0; i < dice.length; i++) {\n    let yRand = Math.random() * 20;\n    dice[i].getObject().position.x = -15 - (i % 3) * 1.5;\n    dice[i].getObject().position.y = 2 + Math.floor(i / 3) * 1.5;\n    dice[i].getObject().position.z = -15 + (i % 3) * 1.5;\n    dice[i].getObject().quaternion.x =\n      ((Math.random() * 90 - 45) * Math.PI) / 180;\n    dice[i].getObject().quaternion.z =\n      ((Math.random() * 90 - 45) * Math.PI) / 180;\n    dice[i].updateBodyFromMesh();\n    let rand = Math.random() * 5;\n    dice[i]\n      .getObject()\n      .body.velocity.set(25 + rand, 40 + yRand, 15 + rand);\n    dice[i]\n      .getObject()\n      .body.angularVelocity.set(\n        20 * Math.random() - 10,\n        20 * Math.random() - 10,\n        20 * Math.random() - 10\n      );\n\n    //diceValues.push({ dice: dice[i], value: i + 1 });\n    diceValues.push({ dice: dice[i], value: Math.floor(yRand) + 1 });\n  }\n\n  DiceManager.prepareValues(diceValues);\n}\n\nfunction animate() {\n\tupdatePhysics();\n\trender();\n\tupdate();\n\trequestAnimationFrame(animate);\n}\n\nfunction updatePhysics() {\n\tworld.step(1.0 / 60.0);\n\n\tfor (var i in dice) {\n\t\tdice[i].updateMeshFromBody();\n\t}\n}\n\nfunction update() {\n\tcontrols.update();\n\t// stats.update();\n}\n\nfunction render() {\n\trenderer.render(scene, camera);\n}\n\n</script>\n\n<div id=\"ThreeJS\" style=\"position: absolute; left:0px; top:0px\"></div>\n\n<div id=\"foreground\">\n  <h1>Hello {username}!</h1>\n\n\n  <h2>Rollers</h2>\n  <ul>\n    {#each userList as user, i}\n      <li>\n        {user}\n      </li>\n    {/each}\n  </ul>\n\n  <button on:click={randomDiceThrow}>Roll dice</button>\n\n  <h2>Rolls</h2>\n  <ul>\n    {#each rolls as {user, result}, i}\n      <li>\n        {user}: {result}\n      </li>\n    {/each}\n  </ul>\n\n</div>\n\n<Player playername={username} latestroll={mylatestroll}/>\n<Table/>\n<DiceInput/>\n",
    "<script>\n\n    export let playername = 'Anonymous player';\n    export let latestroll = 0;\n\n</script>\n\n<style>\n\n.playername {\n\n    background-color: rgb(172, 100, 190);\n    border: 1em;\n    padding: 0.2em;\n}\n\n</style>\n\n<h2 class=\"playername\">Welcome {playername}!</h2>\n<p class=\"latestroll\">Your latest roll was: {latestroll}</p>",
    "<script>\n\n    let tabletextures = [\n\t\t{ id: 0, name: \"Tavern #1\", path: 'table/img/table00.jpg'},\n\t\t{ id: 1, name: \"Tavern #2\", path: 'table/img/table01.jpg'},\n\t\t{ id: 2, name: \"Tavern #3\", path: 'table/img/table02.jpg'},\n    ];\n    \n    let textureindex = 2; \n    let text = \"Game table selected by default\";\n    export let selectedImage = tabletextures[textureindex]['path'];\n\n    function setImage(i) {\n        selectedImage = tabletextures[i]['path'];\n        text = \"You chose \"+tabletextures[i]['name'];\n    }\n\n</script>\n\n<style>\nimg {\n    padding: 0.5em;\n}\n\n.selectedtexture {\n  padding: 0.5em;\n  border-radius: 5%;  \n}\n\n.texturesample {\n  padding: 0.5em;\n  border-radius: 10%;\n  width: 100px;\n}\n\n</style>\n\n<h1>Choose your game table texture</h1>\n\n{#each tabletextures as { id, path }, i}\n<img on:click|preventDefault={() => setImage(i)} class=\"texturesample\"  src=\"{path}\" alt=\"{id}\"/>\n{/each}\n<br/>\n<img src=\"{selectedImage}\" class=\"selectedtexture\" alt=\"Table texture #1\"/>\n<p>{text}</p>\n\n"
  ],
  "names": [],
  "mappings": "AACC,QAAQ,cAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,AACX,CAAC,AACA,WAAW,cAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,AACV,CAAC;ACFH,WAAW,cAAC,CAAC,AAET,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,KAAK,AAClB,CAAC;ACMD,GAAG,cAAC,CAAC,AACD,OAAO,CAAE,KAAK,AAClB,CAAC,AAED,gBAAgB,cAAC,CAAC,AAChB,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,EAAE,AACnB,CAAC,AAED,cAAc,cAAC,CAAC,AACd,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,KAAK,AACd,CAAC"
}